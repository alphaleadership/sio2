/**
 * Test v2 pour v√©rifier que les corrections de duplication de chemin dans le syst√®me de compression fonctionnent
 */

console.log('=== Test v2 des Corrections de Duplication de Chemin - Compression ===\n');

try {
  const FileStorageMiddleware = require('./lib/compression/FileStorageMiddleware');
  const CompressionService = require('./lib/compression/CompressionService');
  const CompressionConfig = require('./lib/compression/CompressionConfig');
  const path = require('path');

  // Cr√©er une instance du middleware pour tester les m√©thodes priv√©es
  const compressionService = new CompressionService();
  const compressionConfig = new CompressionConfig();
  const middleware = new FileStorageMiddleware(compressionService, compressionConfig);

  console.log('1. Test de correction de duplication de chemin simple (Unix)...');
  
  const baseDir = '/home/labo/temp/partage';
  
  // Test 1: Duplication cons√©cutive simple
  const duplicatedPath1 = '/home/labo/temp/partage/users/test/users/test';
  const corrected1 = middleware._correctPathDuplication(duplicatedPath1, baseDir);
  console.log(`   Original: ${duplicatedPath1}`);
  console.log(`   Corrig√©:  ${corrected1}`);
  
  const expected1 = path.join(baseDir, 'users', 'test');
  if (corrected1 === expected1) {
    console.log('   ‚úì Test r√©ussi - duplication cons√©cutive supprim√©e\n');
  } else {
    console.log(`   ‚ùå Test √©chou√© - attendu: ${expected1}, re√ßu: ${corrected1}\n`);
  }

  // Test 2: Duplication de pattern complexe
  console.log('2. Test de correction de pattern de duplication complexe...');
  
  const duplicatedPath2 = '/home/labo/temp/partage/users/john/documents/users/john/files';
  const corrected2 = middleware._correctPathDuplication(duplicatedPath2, baseDir);
  console.log(`   Original: ${duplicatedPath2}`);
  console.log(`   Corrig√©:  ${corrected2}`);
  
  const expected2 = path.join(baseDir, 'users', 'john', 'documents', 'files');
  if (corrected2 === expected2) {
    console.log('   ‚úì Test r√©ussi - pattern de duplication supprim√©\n');
  } else {
    console.log(`   ‚ùå Test √©chou√© - attendu: ${expected2}, re√ßu: ${corrected2}\n`);
  }

  // Test 3: Chemin sans duplication (ne doit pas changer)
  console.log('3. Test avec chemin sans duplication...');
  
  const cleanPath = '/home/labo/temp/partage/users/alice/documents';
  const corrected3 = middleware._correctPathDuplication(cleanPath, baseDir);
  console.log(`   Original: ${cleanPath}`);
  console.log(`   Corrig√©:  ${corrected3}`);
  
  if (corrected3 === cleanPath) {
    console.log('   ‚úì Test r√©ussi - chemin propre inchang√©\n');
  } else {
    console.log(`   ‚ùå Test √©chou√© - chemin propre modifi√©\n`);
  }

  // Test 4: Chemin de base (doit retourner baseDir)
  console.log('4. Test avec chemin de base...');
  
  const corrected4 = middleware._correctPathDuplication(baseDir, baseDir);
  console.log(`   Original: ${baseDir}`);
  console.log(`   Corrig√©:  ${corrected4}`);
  
  if (corrected4 === baseDir) {
    console.log('   ‚úì Test r√©ussi - chemin de base inchang√©\n');
  } else {
    console.log(`   ‚ùå Test √©chou√© - chemin de base modifi√©\n`);
  }

  // Test 5: Test avec chemins Windows (si on est sur Windows)
  console.log('5. Test avec chemins Windows...');
  
  const windowsBase = 'C:\\partage';
  const windowsPath = 'C:\\partage\\users\\test\\users\\test\\documents';
  const corrected5 = middleware._correctPathDuplication(windowsPath, windowsBase);
  console.log(`   Original: ${windowsPath}`);
  console.log(`   Corrig√©:  ${corrected5}`);
  
  const expected5 = path.join(windowsBase, 'users', 'test', 'documents');
  if (corrected5 === expected5) {
    console.log('   ‚úì Test r√©ussi - chemin Windows corrig√©\n');
  } else {
    console.log(`   ‚ùå Test √©chou√© - attendu: ${expected5}, re√ßu: ${corrected5}\n`);
  }

  // Test 6: Test de suppression de patterns de duplication
  console.log('6. Test de suppression de patterns de duplication...');
  
  const segments1 = ['users', 'test', 'users', 'test', 'documents'];
  const cleaned1 = middleware._removePatternDuplications(segments1);
  console.log(`   Segments originaux: [${segments1.join(', ')}]`);
  console.log(`   Segments nettoy√©s:  [${cleaned1.join(', ')}]`);
  
  if (JSON.stringify(cleaned1) === JSON.stringify(['users', 'test', 'documents'])) {
    console.log('   ‚úì Test r√©ussi - pattern de duplication supprim√©\n');
  } else {
    console.log('   ‚ùå Test √©chou√© - pattern non supprim√© correctement\n');
  }

  // Test 7: Segments sans duplication
  console.log('7. Test avec segments sans duplication...');
  
  const segments2 = ['users', 'alice', 'documents', 'files'];
  const cleaned2 = middleware._removePatternDuplications(segments2);
  console.log(`   Segments originaux: [${segments2.join(', ')}]`);
  console.log(`   Segments nettoy√©s:  [${cleaned2.join(', ')}]`);
  
  if (JSON.stringify(cleaned2) === JSON.stringify(segments2)) {
    console.log('   ‚úì Test r√©ussi - segments propres inchang√©s\n');
  } else {
    console.log('   ‚ùå Test √©chou√© - segments propres modifi√©s\n');
  }

  // Test 8: Test avec triple duplication
  console.log('8. Test avec triple duplication...');
  
  const triplePath = '/home/labo/temp/partage/users/test/users/test/users/test';
  const corrected8 = middleware._correctPathDuplication(triplePath, baseDir);
  console.log(`   Original: ${triplePath}`);
  console.log(`   Corrig√©:  ${corrected8}`);
  
  const expected8 = path.join(baseDir, 'users', 'test');
  if (corrected8 === expected8) {
    console.log('   ‚úì Test r√©ussi - triple duplication supprim√©e\n');
  } else {
    console.log(`   ‚ùå Test √©chou√© - attendu: ${expected8}, re√ßu: ${corrected8}\n`);
  }

  // Test 9: Test avec chemin invalide (ne commence pas par baseDir)
  console.log('9. Test avec chemin invalide...');
  
  const invalidPath = '/other/path/users/test';
  const corrected9 = middleware._correctPathDuplication(invalidPath, baseDir);
  console.log(`   Original: ${invalidPath}`);
  console.log(`   Corrig√©:  ${corrected9}`);
  
  if (corrected9 === invalidPath) {
    console.log('   ‚úì Test r√©ussi - chemin invalide inchang√©\n');
  } else {
    console.log('   ‚ùå Test √©chou√© - chemin invalide modifi√©\n');
  }

  console.log('üéâ Tests v2 termin√©s !');
  console.log('\nCorrections appliqu√©es au syst√®me de compression:');
  console.log('  ‚úì D√©tection et correction des duplications de chemin dans destFolder');
  console.log('  ‚úì Suppression des duplications cons√©cutives (ex: /users/test/users/test)');
  console.log('  ‚úì Suppression des patterns de duplication complexes');
  console.log('  ‚úì Support des chemins Windows et Unix');
  console.log('  ‚úì Pr√©servation des chemins propres sans modification');
  console.log('  ‚úì Gestion d\'erreurs robuste avec fallback');
  console.log('  ‚úì Validation des chemins de base');

} catch (error) {
  console.error('‚ùå Test √©chou√©:', error.message);
  console.error('Stack trace:', error.stack);
  process.exit(1);
}
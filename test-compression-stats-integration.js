/**
 * Test d'int√©gration du syst√®me de statistiques de compression
 * V√©rifie que les statistiques sont correctement collect√©es et sauvegard√©es
 */

const path = require('path');
const fs = require('fs').promises;
const CompressionStats = require('./lib/compression/CompressionStats');
const CompressionService = require('./lib/compression/CompressionService');
const CompressionConfig = require('./lib/compression/CompressionConfig');
const FileStorageMiddleware = require('./lib/compression/FileStorageMiddleware');

async function testCompressionStatsIntegration() {
  console.log('=== Test d\'int√©gration des statistiques de compression ===\n');

  try {
    // 1. Cr√©er les instances n√©cessaires
    console.log('1. Initialisation des composants...');
    const config = new CompressionConfig();
    const service = new CompressionService();
    const stats = new CompressionStats();
    const middleware = new FileStorageMiddleware(service, config, stats);
    
    console.log('‚úì Composants initialis√©s\n');

    // 2. Simuler des op√©rations de compression via le middleware
    console.log('2. Simulation d\'op√©rations de compression...');
    
    // Simuler une compression r√©ussie
    middleware._recordCompressionStats('/test/document.txt', 5000, 2000, true);
    middleware._recordCompressionStats('/test/script.js', 8000, 3200, true);
    middleware._recordCompressionStats('/test/style.css', 3000, 1200, true);
    
    // Simuler une compression √©chou√©e
    middleware._recordCompressionStats('/test/image.jpg', 2000000, 2000000, false);
    middleware._recordCompressionStats('/test/video.mp4', 50000000, 50000000, false);
    
    console.log('‚úì 5 op√©rations simul√©es\n');

    // 3. V√©rifier les statistiques globales
    console.log('3. V√©rification des statistiques globales...');
    const globalStats = stats.getGlobalStats();
    
    console.log(`   - Fichiers trait√©s: ${globalStats.totalFilesProcessed}`);
    console.log(`   - Fichiers compress√©s: ${globalStats.totalFilesCompressed}`);
    console.log(`   - Taux de compression: ${globalStats.compressionRate.toFixed(1)}%`);
    console.log(`   - Espace √©conomis√©: ${globalStats.formattedSpaceSaved}`);
    console.log(`   - Ratio moyen: ${(globalStats.averageCompressionRatio * 100).toFixed(1)}%`);
    
    // V√©rifications
    if (globalStats.totalFilesProcessed !== 5) {
      throw new Error(`Attendu 5 fichiers trait√©s, obtenu ${globalStats.totalFilesProcessed}`);
    }
    if (globalStats.totalFilesCompressed !== 3) {
      throw new Error(`Attendu 3 fichiers compress√©s, obtenu ${globalStats.totalFilesCompressed}`);
    }
    if (globalStats.totalSpaceSaved !== 6800) { // (5000-2000) + (8000-3200) + (3000-1200)
      throw new Error(`Attendu 6800 bytes √©conomis√©s, obtenu ${globalStats.totalSpaceSaved}`);
    }
    
    console.log('‚úì Statistiques globales correctes\n');

    // 4. V√©rifier les statistiques par type
    console.log('4. V√©rification des statistiques par type...');
    const statsByType = stats.getStatsByType();
    
    const expectedTypes = ['.txt', '.js', '.css', '.jpg', '.mp4'];
    for (const type of expectedTypes) {
      if (!statsByType[type]) {
        throw new Error(`Type ${type} manquant dans les statistiques`);
      }
      console.log(`   ${type}: ${statsByType[type].filesProcessed} trait√©s, ${statsByType[type].filesCompressed} compress√©s`);
    }
    
    console.log('‚úì Statistiques par type correctes\n');

    // 5. Tester la sauvegarde et le chargement
    console.log('5. Test de sauvegarde et chargement...');
    const testStatsPath = path.join(__dirname, 'temp', 'test-compression-stats.json');
    
    // Sauvegarder
    await stats.saveToFile(testStatsPath);
    console.log('‚úì Statistiques sauvegard√©es');
    
    // Charger dans une nouvelle instance
    const loadedStats = await CompressionStats.loadFromFile(testStatsPath);
    const loadedGlobalStats = loadedStats.getGlobalStats();
    
    // V√©rifier que les donn√©es sont identiques
    if (loadedGlobalStats.totalFilesProcessed !== globalStats.totalFilesProcessed) {
      throw new Error('Donn√©es charg√©es diff√©rentes des donn√©es originales');
    }
    
    console.log('‚úì Chargement v√©rifi√©\n');

    // 6. Tester la g√©n√©ration de rapport
    console.log('6. Test de g√©n√©ration de rapport...');
    const report = stats.generateReport();
    
    if (!report.summary || !report.byFileType || !report.topPerformers) {
      throw new Error('Structure de rapport invalide');
    }
    
    console.log(`   R√©sum√©: ${report.summary.efficiency}`);
    console.log(`   Types de fichiers: ${Object.keys(report.byFileType).length}`);
    console.log(`   Meilleurs performers: ${report.topPerformers.mostEfficient.length}`);
    
    console.log('‚úì Rapport g√©n√©r√© correctement\n');

    // 7. Nettoyer le fichier de test
    try {
      await fs.unlink(testStatsPath);
      console.log('‚úì Fichier de test nettoy√©\n');
    } catch (error) {
      // Ignorer si le fichier n'existe pas
    }

    console.log('=== Test d\'int√©gration r√©ussi ===');
    return true;

  } catch (error) {
    console.error('‚ùå Erreur lors du test d\'int√©gration:', error.message);
    return false;
  }
}

async function testRealTimeStatsSaving() {
  console.log('\n=== Test de sauvegarde en temps r√©el ===\n');

  try {
    // Cr√©er une instance de middleware avec sauvegarde automatique
    const config = new CompressionConfig();
    const service = new CompressionService();
    const stats = new CompressionStats();
    const middleware = new FileStorageMiddleware(service, config, stats);
    
    const testStatsPath = path.join(__dirname, 'temp', 'realtime-stats-test.json');
    
    // Simuler plusieurs op√©rations rapides
    console.log('Simulation d\'op√©rations rapides...');
    for (let i = 0; i < 10; i++) {
      middleware._recordCompressionStats(`/test/file${i}.txt`, 1000 + i * 100, 500 + i * 50, true);
    }
    
    // Attendre que la sauvegarde automatique se d√©clenche
    console.log('Attente de la sauvegarde automatique...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // V√©rifier que le fichier a √©t√© cr√©√©
    try {
      const fileStats = await fs.stat(testStatsPath);
      console.log(`‚úì Fichier de statistiques cr√©√© (${fileStats.size} bytes)`);
      
      // Charger et v√©rifier le contenu
      const loadedStats = await CompressionStats.loadFromFile(testStatsPath);
      const globalStats = loadedStats.getGlobalStats();
      
      if (globalStats.totalFilesProcessed === 10) {
        console.log('‚úì Sauvegarde automatique fonctionne correctement');
      } else {
        console.log(`‚úó Donn√©es incorrectes: ${globalStats.totalFilesProcessed} au lieu de 10`);
      }
      
      // Nettoyer
      await fs.unlink(testStatsPath);
      
    } catch (error) {
      console.log('‚úó Fichier de statistiques non trouv√© ou erreur:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test de sauvegarde temps r√©el:', error.message);
  }
}

// Ex√©cuter les tests si ce fichier est appel√© directement
if (require.main === module) {
  testCompressionStatsIntegration()
    .then(success => {
      if (success) {
        return testRealTimeStatsSaving();
      }
    })
    .then(() => {
      console.log('\nüéâ Tous les tests termin√©s');
    })
    .catch(error => {
      console.error('Erreur g√©n√©rale:', error);
      process.exit(1);
    });
}

module.exports = {
  testCompressionStatsIntegration,
  testRealTimeStatsSaving
};